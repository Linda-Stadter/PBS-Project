#include "./SPHGlobals.cginc"

#pragma kernel calcIntegration

RWStructuredBuffer<FluidParticle> particlesBuffer;
RWStructuredBuffer<uint> particlesIndexBuffer;
StructuredBuffer<float> densityBuffer;
StructuredBuffer<float> forceBuffer;
bool Leapfrog;
bool IsLFtime;

[numthreads(THREADS, 1, 1)]
void calcIntegration(uint3 id : SV_DispatchThreadID)
{
    // force integration
    const float deltaTime = 0.016f;
    const float3 g = float3(0, -9.8f, 0);
    const float width = 2.0f;
    const float damping = 0.01f;

    uint particleIdx = particlesIndexBuffer[id.x];
    FluidParticle particleA = particlesBuffer[particleIdx];


    if (IsLFtime&&Leapfrog)
    {
        particleA.vLF = particleA.v + deltaTime * 0.5 *(forceBuffer[particleIdx] / densityBuffer[particleIdx] + g);
        particleA.posLF = particleA.pos + deltaTime * 0.5 * particleA.v;
    }
    if ((!IsLFtime) && Leapfrog)
    {
        particleA.v = particleA.v + deltaTime * (forceBuffer[particleIdx] / densityBuffer[particleIdx] + g);
        particleA.pos = particleA.pos + deltaTime * 0.5 * (particleA.v + particleA.vLF);
    }

    if (!Leapfrog)
    {
        particleA.v += deltaTime * (forceBuffer[particleIdx] / densityBuffer[particleIdx] + g);
        particleA.pos += deltaTime * particleA.v;
    }
    
    



    // box collision
    if(!IsLFtime)
    {
        if (particleA.pos.x < -width) {
            particleA.pos.x = -width;
            particleA.v.x = -particleA.v.x * damping;
        }
        else if (particleA.pos.x > width) {
            particleA.pos.x = width;
            particleA.v.x = -particleA.v.x * damping;
        }

        if (particleA.pos.y < -width) {
            particleA.pos.y = -width;
            particleA.v.y = -particleA.v.y * damping;
        } /*
        else if (particleA.pos.y > width) {
            particleA.pos.y = width;
            particleA.v.y = -particleA.v.y * damping;
        } */

        if (particleA.pos.z < -width) {
            particleA.pos.z = -width;
            particleA.v.z = -particleA.v.z * damping;
        }
        else if (particleA.pos.z > width) {
            particleA.pos.z = width;
            particleA.v.z = -particleA.v.z * damping;
        }
    }



    particlesBuffer[particleIdx] = particleA;
}

