#include "./Globals.cginc"
#pragma kernel calcForce


RWStructuredBuffer<float3> forceBuffer;

StructuredBuffer<FluidParticle> particlesBuffer;
StructuredBuffer<uint> particlesIndexBuffer;
StructuredBuffer<float> cellIndexBuffer;
StructuredBuffer<uint> offsetBuffer;
StructuredBuffer<float> densityBuffer;

uint particleCount;

[numthreads(THREADS, 1, 1)]
void calcForce(uint3 id : SV_DispatchThreadID)
{
	const float h = xSPH_h;			// smoothing radius
	const float h2 = xSPH_h2;		// smoothing radius ^ 2
	const float h3 = xSPH_h3;		// smoothing radius ^ 3
	const float K = xSPH_K;			// pressure constant
	const float p0 = xSPH_p0;		// reference density
	const float e = xSPH_e;			// viscosity constant


	uint particleIdxA = particlesIndexBuffer[id.x];
	float densityA = densityBuffer[particleIdxA];

	FluidParticle particleA = particlesBuffer[particleIdxA];
	float3 posA = particleA.pos;

	// Grid cell is of size [SPH smoothing radius], so position is refitted into that
	const float3 remappedPos = posA * xSPH_h_rcp;
	const int3 cellIndex = floor(remappedPos);

	// Compute acceleration:
	float3 force_total = forceBuffer[particleIdxA];
	float3 f_a = 0;	// pressure force
	float3 f_av = 0;  // viscosity force

	// iterate through all [27] neighbor cells:
	[loop]
	for (int i = -1; i <= 1; ++i)
	{
		[loop]
		for (int j = -1; j <= 1; ++j)
		{
			[loop]
			for (int k = -1; k <= 1; ++k)
			{
				// hashed cell index is retrieved:
				const int3 neighborIndex = cellIndex + int3(i, j, k);
				const uint flatNeighborIndex = SPH_GridHash(neighborIndex, particleCount);

				// look up the offset into particle list from neighbor cell:
				uint neighborIterator = offsetBuffer[flatNeighborIndex];

				// iterate through neighbor cell particles (if iterator offset is valid):
				[loop]
				while (neighborIterator != 0x0FFFFFFF && neighborIterator < particleCount)
				{
					uint particleIdxB = particlesIndexBuffer[neighborIterator];
					if ((uint)cellIndexBuffer[neighborIterator] != flatNeighborIndex)
					{
						// here means we stepped out of the neighbor cell list!
						break;
					}

					// SPH Force evaluation:
					FluidParticle particleB = particlesBuffer[particleIdxB];
					float3 posB = particleB.pos;

					const float3 diff = posA - posB;
					const float r2 = dot(diff, diff);
					const float r = sqrt(r2);

					if (r > 0 && r < h)
					{
						// Normalize distance between particles
						const float3 rNorm = diff / r;
						// Spiky kernel smoothing for pressure forces
						const float Wpress = xSPH_spiky_constant * pow(h - r, 2);

						float densityB = densityBuffer[particleIdxB];


						/* Pressure Calculation */
						/* (1) Final Thesis (Tait equation with gamma = 7) */
						// float pressureA = xSPH_K * (pow((densityA / p0), xSPH_gamma) - 1);
						// float pressureB = xSPH_K * (pow((densityB / p0), xSPH_gamma) - 1);
						/* (2) Wicked Engine (Ideal gas law equation) */
						float pressureA = K * (densityA - p0);
						float pressureB = K * (densityB - p0);


						/* Pressure gradient */
						/* (1) Final Thesis (Symmetrizing pressure gradient) */
						f_a += xSPH_mass * (pressureA / pow(densityA, 2) + pressureB / pow(densityB, 2)) * Wpress * rNorm;

						/* (2) Wicked Engine */
						// f_a += (xSPH_mass / xSPH_mass) * ((pressureA + pressureB) / (2 * densityA * densityB)) * Wpress * rNorm;
						

						/* Poly6-Kernel for viscosity forces */
						/* (1) Final Report */
						const float Wvis = -xSPH_spiky_constant * (h - r);
						float3 vDiff = particleA.v - particleB.v;
						f_av = xSPH_mass * (vDiff/ densityB) * Wvis;

						/* (2) Wicked-Engine */
						// const float r3 = r2 * r;
						// const float Wvis = -(r3 / (2 * h3)) + (r2 / h2) + (h / (2 * r)) - 1; // Laplacian smoothing function
						// f_av += (xSPH_mass / xSPH_mass) * (1.0f / densityB) * (vDiff) * Wvis * rNorm;
					}

					neighborIterator++;
				}
			}
		}
	}

	f_a *= -1;
	f_av *= e;

	force_total = (f_a + f_av) / densityA + xSPH_g;
	forceBuffer[particleIdxA] = force_total;
}
